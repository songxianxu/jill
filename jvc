#!/usr/bin/env bash
source "$(dirname "$0")/.jvcrc"
JVC_DIR="$(dirname "$0")"


# Global arguments
args=("$@")

# Basic std

jvc_echo() {
  command printf %s\\n "$*" 2>/dev/null
}

jvc_err() {
  bold=$(command tput bold)
  command printf "\e[31m${bold}Error: %s\e[m\\n" "$*" 2>/dev/null
}

jvc_warn() {
  bold=$(command tput bold)
  command printf "\e[33m${bold}Warning: %s\e[m\\n" "$*" 2>/dev/null
}

jvc_done() {
  bold=$(command tput bold)
  command printf "\e[32m${bold}%s\e[m\\n" "$*" 2>/dev/null
}


jvc_has() {
  type "${1-}" > /dev/null 2>&1
}

jvc_has_julia_installed() {
  [ "$(command -v julia)" != '' ]
}

jvc_pre_installed_version() {
  if jvc_has_julia_installed; then
    echo Julia version "$(julia --version | awk '{print $3}') has been installed."
  fi
}


# https://unix.stackexchange.com/questions/614299/how-to-split-a-string-by-character-in-bash-zsh
jvc_split() { 
  local IFS="$2"
  set -o noglob
  eval "$3"'=( $1"")'
}

# delimiter $1
# Input string $2
jvc_split2() {
  local delimiter
  local input
  delimiter=$1
  input=$2
  awk -F"$delimiter" '{for (i=1;i<=NF;i++) print $i}' <<< "$input"
}


# Get latest_version
# https://gist.github.com/lukechilds/a83e1d7127b78fef38c2914c4ececc3c
jvc_get_latest_version() {
  basename "$(curl -fs -o/dev/null -w '%{redirect_url}' "$1"/releases/latest)" | cut -c2-
}


jvc_get_nightly_url() {
  local sys=$1
  local full_arch=$2
  [[ $full_arch == *"64" ]] && arch=x64 || arch=x32
  [[ $full_arch == "mac"* ]] && suffix=mac64.dmg || suffix=$sys-$full_arch.tar.gz
  echo "https://julialangnightlies-s3.julialang.org/bin/$sys/$arch/julia-latest-${sys}64.tar.gz"
}

# https://gist.github.com/lukechilds/a83e1d7127b78fef38c2914c4ececc3c
# Not in use
jvc_get_latest_release() {
  curl --silent "https://api.github.com/repos/$1/releases/latest" | # Get latest release from GitHub api
    grep '"tag_name":' |                                            # Get tag line
    sed -E 's/.*"([^"]+)".*/\1/'                                # Pluck JSON value
  }

# Replace jq to something else
jvc_get_upstream_url() {
  local upstream_name
  upstream_name="$1"
  curl -s "https://raw.githubusercontent.com/johnnychen94/jill.py/master/jill/config/sources.json" | awk "/$1/ {getline; getline; getline; print}"  | xargs
}

jvc_get_upstream_local() { 
  local upstream_name
  upstream_name="$1"
  if [ -f  "$JVC_DIR/upstream.conf" ]; then
    awk "/$upstream_name/{flag=1;next} /Name/{flag=0} flag" "$JVC_DIR/upstream.conf" | grep "URL" | cut -d"=" -f2- | xargs 
  else
    jvc_err "Upstream config file upstream.conf is missing"
    exit 1
  fi
}



jvc_get_upstream_checksum_url(){
  local upstream_name=$1
  echo "$(jvc_get_upstream_url "$upstream_name" | awk -F'$' '{print $1}')checksums/"
}

jvc_get_upstream_checksum_local(){
  local upstream_name=$1
  echo "$(jvc_get_upstream_local "$upstream_name" | awk -F'$' '{print $1}')checksums/"
}

jvc_get_upstream_list_local(){
  local upstream_info
  if [ -f "$(dirname "$0")/upstream.conf" ]; then
    awk '/#/ {if (x) print x; x= ""}{x=(!x)?$0:x","$0;}END{print x;}' "$(dirname "$0")/upstream.conf" |  awk -F"[,/=/#]" '{print $4 ": " $2 ","}' | awk '{$1=$1;print}'

  else
    jvc_err "Upstream config file upstream.conf is missing"
    exit 1
  fi
}



jvc_get_upstream_list(){
  # curl -s "https://raw.githubusercontent.com/johnnychen94/jill.py/master/jill/config/sources.json" | awk '/"name"/ {print p " " $0 }{p=$0} ' | awk -F: '{print $1 ": " $3}' | tr -d '"' | awk '{$1=$1;print "  " NR ". " $0}'  
  local upstream_info
  local status
  upstream_info=$(curl -s -L "https://raw.githubusercontent.com/johnnychen94/jill.py/master/jill/config/sources.json" 2>/dev/null || echo $?)
  # curl -s "https://raw.githubusercontent.com/johnnychen94/jill.py/master/jill/config/sources.json" | awk '/"name"/ {print p " " $0 }{p=$0} ' | awk -F: '{print $1 ": " $3}' | tr -d '"' | awk '{$1=$1;print $0}'  
  echo "$upstream_info" | awk '/"name"/ {print p " " $0 }{p=$0} ' | awk -F: '{print $1 ": " $3}' | tr -d '"' | awk '{$1=$1;print $0}'  
}



jvc_get_version_from_json() {
  local json_dir
  # json_dir=$(dirname "$0")
  json_dir=$1
  VersionList=$(awk '/files/ {print line} {line =$0}' "$json_dir"/versions.json \
    | awk -F: '{print $1}')

  for version in "${VersionList[@]}"; do 
    echo "$version"
  done
}


jvc_get_version_from_json_online() {
  local versions
  versions=$(curl -s "https://julialang-s3.julialang.org/bin/versions.json" | awk '/files/ {print line} {line =$0}' | awk -F: '{print $1}')
  for version in "${versions[@]}"; do 
    echo "$version"
  done
}

jvc_ls_stable() {
  version_list=$(jvc_get_version_from_json_online)
  echo "${version_list[@]}" | grep -Ev "rc|alpha|beta"  | tr -d '"' | sort -r 
}

jvc_ls_all() {
  version_list=$(jvc_get_version_from_json_online)
  echo "  nightly"
  echo "${version_list[@]}" | tr -d '"' | sort -r
}

# Query the version file
jvc_query_latest_stable() {
  echo "Querying lastest Julia version ..."
  INSTALLING_VER=$(jvc_get_latest_version https://github.com/JuliaLang/julia)
  echo "Latest stable version is $INSTALLING_VER"
}


jvc_search() {
  echo Querying Julia version "$1" ...
  # Clean the raw version input
  local version_raw
  version_raw="$1"
  local version_tmp
  jvc_split "$version_raw" . version_tmp
  if [ -z "${version_tmp[1]}" ] || [ -z "${version_tmp[2]}" ] ; then 
    has_exact_version=0
  else 
    has_exact_version=1
  fi

  if [ -z "${version_tmp[1]}" ]; then 
    version_tmp[1]="[[:digit:]]" 
  fi 
  if [ -z "${version_tmp[2]}" ]; then 
    version_tmp[2]="[[:digit:]]" 
  fi 
  # Clean the input for version query
  # Error check repetition
  local version_tmp
  version_tmp="${version_tmp[0]}\\.${version_tmp[1]}\\.${version_tmp[2]}"

  version_list=$(jvc_get_version_from_json_online)
  # Grep all 
  matched_version=$(printf -- '%s\n'  "$version_list" | grep -E "$version_tmp" | sort -r | tr -d '"')
  # Grep stable version only
  matched_version_stable=$(printf -- '%s\n'  "$version_list" | grep -Ev "rc|beta|alpha" | grep -E "$version_tmp" | sort -r | tr -d '"')
  # Grep stable version only
  matched_version_rc=$(printf -- '%s\n'  "$version_list" | grep -E "$version_tmp" | grep -E "rc|beta|alpha" | sort -r | tr -d '"')

  ask_for_rc=$(echo "$version_raw" | grep -cE "rc|beta|alpha" )

  if [ $has_exact_version == 1 ]; then
    if [ -n "$matched_version" ]; then
      if [ -n "$matched_version_stable" ]; then
        echo "Available versions found:"
        printf -- '%s\n' "${matched_version_stable[@]}"
      elif [ -n "$matched_version_rc" ]; then
        if [ "$ask_for_rc" == 1 ] ; then
          echo "Available versions found:"
          printf -- '%s\n' "${matched_version_rc[@]}"
        else 
          echo "Available versions found:"
          jvc_warn "Only rc or beta version are available"
          printf -- '%s\n' "${matched_version_rc[@]}"
        fi
      fi
    else 
      # echo "Error: Unknown version is given: $1"
      jvc_err "Unknown version is given: $1"
      exit
    fi
  else 
    if [ -n "$matched_version" ]; then
      if [ -n "$matched_version_stable" ]; then
        echo "Available versions found:"
        printf -- '%s\n' "${matched_version_stable[@]}"
      elif [ -n "$matched_version_rc" ]; then
        echo "Available versions found:" 
        # echo Warning: Only rc or beta version are found.
        jvc_warn "Only rc or beta version are available"
        printf -- '%s\n' "${matched_version_rc[@]}"
      fi
    else 
      # echo "Error: version given not found: $1"
      jvc_err "Unknown version is given: $1"
      exit
    fi
  fi
}




jvc_query_version_json() {
  echo "Querying Julia version $1 ..."
  # Clean the raw version input
  local version_raw
  version_raw=$1
  local version_tmp
  jvc_split "$version_raw" . version_tmp
  if [ -z "${version_tmp[1]}" ] || [ -z "${version_tmp[2]}" ] ; then 
    has_exact_version=0
  else 
    has_exact_version=1
  fi

  if [ -z "${version_tmp[1]}" ]; then 
    version_tmp[1]="[[:digit:]]" 
  fi 
  if [ -z "${version_tmp[2]}" ]; then 
    version_tmp[2]="[[:digit:]]" 
  fi 
  # Clean the input for version query
  local version_tmp
  version_tmp="${version_tmp[0]}\\.${version_tmp[1]}\\.${version_tmp[2]}"

  version_list=$(jvc_get_version_from_json_online)
  local matched_version
  local matched_version_stable
  local matched_version_rc
  # Grep all 
  matched_version=$(printf -- '%s\n'  "$version_list" | grep -E "$version_tmp" | sort -r | tr -d '"')
  # Grep stable version only
  matched_version_stable=$(printf -- '%s\n'  "$version_list" | grep -Ev "rc|beta|alpha" | grep -E "$version_tmp" | sort -r | tr -d '"')
  # Grep stable version only
  matched_version_rc=$(printf -- '%s\n'  "$version_list" | grep -E "$version_tmp" | grep -E "rc|beta|alpha" | sort -r | tr -d '"')

  ask_for_rc=$(echo "$version_raw" | grep -cE "rc|beta|alpha" )

  # Given exact version number e.g. 1.1.1 
  if [ $has_exact_version == 1 ]; then
    # If there is matched exact version
    if [ -n "$matched_version" ]; then
      # If there is macthed stable version
      if [ -n "$matched_version_stable" ]; then
        echo "Available versions found:"
        printf -- '%s\n' "$matched_version_stable"
        echo Installing version "$1" ... 
        INSTALLING_VER=$1
        # If there is macthed rc version
      elif [ -n "$matched_version_rc" ]; then
        # If specifically asked for rc
        if [ "$ask_for_rc" == 1 ] ; then
          echo "Available versions found:"
          printf -- '%s\n' "$matched_version_rc"
          echo Installing version "$1" ... 
          INSTALLING_VER=$(printf "%s\n" "$matched_version_rc" | head -n1 | xargs)
          printf "Installing version %s by default\n" "$INSTALLING_VER"

        # If ones does not ask for rc but there is no stable version and only rc
      else 
        echo "Available versions found:"
        # echo Warning: Only rc or beta version are available.
        jvc_warn "Only rc or beta version are available."
        printf -- '%s\n' "$matched_version_rc"
        INSTALLING_VER=$(printf "%s\n" "$matched_version_rc" | head -n1 | xargs)
        printf "Installing version %s by default\n" "$INSTALLING_VER"
        fi
      fi
    else 
      # echo "Error: Unknown version is given: $1"
      jvc_err "Unknown version is given: $1"
      exit
    fi
  else 
    if [ -n "$matched_version" ]; then
      if [ -n "$matched_version_stable" ]; then
        echo "Available versions found:"
        printf -- '%s\n' "${matched_version_stable[@]}"
        INSTALLING_VER=$(printf "%s\n" "$matched_version_stable" | head -n1 | xargs)
        printf "Installing version %s by default\n" "$INSTALLING_VER"
      elif [ -n "$matched_version_rc" ]; then
        echo Available versions found: 
        echo Warning: Only rc or beta version are available.
        printf -- '%s\n' "${matched_version_rc[@]}"
        INSTALLING_VER=$(printf "%s\n" "$matched_version_rc" | head -n1 | xargs)
        printf "Installing version %s by default\n" "$INSTALLING_VER"
      fi
    else 
      echo "Error: Unknown version is given: $1"
      exit
    fi
  fi
}




jvc_get_version() {
  if [ $# == 1 ]
  then
    jvc_query_latest_stable 
  elif [ $# == 2 ] 
  then
    jvc_query_version_json "$2" 
  else 
    echo "Unsupported number of arguments:" "${args[@]}"
  fi
}



# Get the download url from json file
# Try to avoid using jq 
get_url(){
  jq  '."0.7.0-rc2".files[2].triplet' versions.json
}

# Check if version file exist
check_version_file() {
  if [ -f "$JULIA_VERSION_FILE" ]; then
    echo "$JULIA_VERSION_FILE exists."
  else 
    echo "verisons.json is missing."
  fi
}

get_url_from_platform_arch_version() {
  local sys
  local full_arch
  local arch
  local version
  sys=$1
  full_arch=$2
  version=$3
  [[ $full_arch == *"64" ]] && arch=x64 || arch=x32
  local minor_version
  minor_version=$(echo "$version" | cut -d. -f1-2 | cut -d- -f1)
  local url
  url=$(jvc_get_upstream_local "$UPSTREAM_NAME")
  local filename
  filename=$(jvc_generate_filename $sys $full_arch $version)
  eval "echo $url"
}

jvc_get_sys_info() {
  eval "$1=$(uname -m)"
  eval "$2=$(uname -s | tr '[:upper:]' '[:lower:]')"
  # Linux x86
  # uname -m x86_64 x64_32
  # uname -S Linux
  # Linux ARM
  # uname -m aarch64
  # uname -S Linux
  # MacOS
  # uname -m x86_64 
  # uname -S Darwin 
  # FreeBSD
  # uname -m x86_64 
  # uname -S FreeBSD 

}

jvc_generate_filename() {
  local sys
  local full_arch
  local version
  sys=$1
  full_arch=$2
  version=$3
  local filename
  case $sys in
    "linux")
      filename="julia-$version-$sys-$full_arch.tar.gz"
      ;;
    "darwin")
      filename="julia-$version-mac64.dmg"
      ;;
    "freebsd")
      filename="julia-$version-$sys-$full_arch.tar.gz"
      ;;
  esac 
  echo "$filename"
}

jvc_checkfolder() { #$1 action #2 Dir
  local action
  action=$1
  local dir
  dir=$2
  echo "Trying to $action to $dir"
  if [ ! -d "$dir" ]; then 
    echo "> Default $action folder  \"$dir\" is not a valid path."
    printf "> Do you want to create the folder \"%s\" ? (y/n) " "$dir"
    read -r  reply 
    if [[ ! $reply =~ ^[Yy] ]]; then 
      echo Aborted 
      exit 1
    else 
      mkdir -p "$dir"
    fi
  fi
}


jvc_confirm() { 
  local version
  version=$1
  printf "Continue to download Julia %s ? (y/n) " "$version"
  read -r choice
  case "$choice" in 
    y|Y|yes ) true ;;
    n|N|no ) echo "Aborted."  
      false ;; 
    * ) echo "Invalid input, please enter yes or no"
      false
      ;;
  esac
}

jvc_confirm2() { 
  printf "%s" "$@"
  read -r  choice
  case "$choice" in 
    y|Y|yes ) return ;;
    n|N|no ) echo "Aborted."  
      false ;; 
    * ) echo "Invalid input, please enter yes or no"
      false
      ;;
  esac
}


# Reference from: nvm_compute_check_sum 
#Input: filename, e.g., julia-1.4.1.tar.gz
jvc_compute_checksum() {
  local julia_tarball
  julia_tarball="${1-}"
  if [ -z "$julia_tarball" ]; then 
    echo "Provided file to checksum is empty." 
  elif ! [ -f "$julia_tarball" ]; then 
    echo "Provided file to checksum does not exist."
  fi
  # Use sha256sum only
  if jvc_has "sha256sum"; then
    sha256sum "$julia_tarball" | awk '{print $1}'
  elif jvc_has "shasum"; then
    shasum -a 256 "$julia_tarball" | awk '{print $1}'
  elif jvc_has "sha256"; then 
    sha256 -q 256 "$julia_tarball" | awk '{print $1}'
  elif jvc_has "gsha256sum"; then
    gsha256sum "$julia_tarball" | awk '{print $1}'
  fi
}

jvc_get_remote_checksum() {
  # Clean the version thing, write a independent filename generator
  local version
  version=$1 
  local arch
  local platform 
  jvc_get_sys_info arch platform
  local julia_remote_tarball
  julia_remote_tarball=julia-$version-$platform-$arch
  local checksum_url
  # checksum_url=$(jvc_get_upstream_checksum_url "$UPSTREAM_NAME")
  checksum_url=$(jvc_get_upstream_checksum_local "$UPSTREAM_NAME")

  local remote_checksum
  remote_checksum=$(curl -s "${checksum_url}julia-$version.sha256" | grep "$julia_remote_tarball")
  echo "$remote_checksum" | cut -d " " -f1
}

# jvc_get_remote_checksum 1.5.3


jvc_compare_checksum() {
  local version
  version=${1-}
  local julia_tarball
  julia_tarball="$JULIA_DOWNLOAD_DIR/julia-${1-}.tar.gz"
  if [ -z "$julia_tarball" ]; then 
    jvc_err "Provided file to checksum is empty." 
    return 1
  elif ! [ -f "$julia_tarball" ]; then 
    jvc_err "Provided file to checksum does not exist."
    return 1
  fi

  local computed_sum
  computed_sum=$(jvc_compute_checksum "${julia_tarball}")
  local checksum
  checksum="$(jvc_get_remote_checksum "$version")"
  if [ -z "${checksum}" ]; then 
    jvc_err "Error: Provided checksum to compare is empty"
    return 
  fi
  if [ -z "${computed_sum}" ]; then 
    echo "Computed checksum of '$julia_tarball' is empty."
    echo "Warning: continues without checksum verification. "
    return 
  elif [ "${computed_sum}" != "${checksum}" ]; then 
    echo "Error: checksums do not match: '${computed_sum}' found, '${checksum}' is expected"
    return 1
  fi
  jvc_done "Checksum matches with remote for version $version"
  return 
}

jvc_download_tarball_curl() {
  local url
  local version
  url=$1
  version=$2
  echo " Downloading from $url"
  if  [ ! -f "$JULIA_DOWNLOAD_DIR/julia-$version.tar.gz" ]; then
    echo -n "    "
    if curl --progress-bar --compressed "$url" --output "$JULIA_DOWNLOAD_DIR/julia-$version".tar.gz; then
      echo " Downloading finished."
      jvc_compare_checksum "$version"
    else 
      echo " Download fails. Please check your connection."
      rm julia-"$version".tar.gz
    fi
  else
    echo " Julia $version is already downloaded as $JULIA_DOWNLOAD_DIR/julia-$version.tar.gz"
    jvc_compare_checksum "$version"
    local checksum_status
    checksum_status=$?
    if $(exit $checksum_status); then 
      return 
    else   
      local choice 
      printf "Do you want to remove it and redownload? [y/n] " 
      read -r choice
      case "$choice" in 
        y|Y|yes ) 
          rm -i "$JULIA_DOWNLOAD_DIR"/julia-"$version".tar.gz
          jvc_download_tarball_curl "$url" "$version"
          ;;
        n|N|no ) echo "Aborted."  
          return 1
          ;;
        *) echo "Please input a valid command "
      esac
    fi
  fi
}



jvc_download_tarball_wget() {
  local url
  local version
  url=$1
  version=$2
  echo " Downloading from $url"
  if  [ ! -f "$JULIA_DOWNLOAD_DIR/julia-$version.tar.gz" ]; then
    echo -n "    "
    if wget -q --show-progress -c "$url" -O "$JULIA_DOWNLOAD_DIR/julia-$version.tar.gz"; then
      echo " Downloading finished."
      jvc_compare_checksum "$version"
    else 
      echo " Download fails. Please check your connection."
      rm julia-"$version".tar.gz
    fi
  else
    echo " Julia $version is already downloaded as $JULIA_DOWNLOAD_DIR/julia-$version.tar.gz"
    jvc_compare_checksum "$version"
    local checksum_status
    checksum_status=$?
    if $(exit $checksum_status); then 
      return 
    else   
      local choice 
      printf "Do you want to remove it and redownload? [y/n] " 
      read -r choice
      case "$choice" in 
        y|Y|yes ) 
          rm -i "$JULIA_DOWNLOAD_DIR"/julia-"$version".tar.gz
          jvc_download_tarball_wget "$url" "$version"
          ;;
        n|N|no ) echo "Aborted."  
          return 1
          ;;
        *) echo "Please input a valid command "
      esac
    fi
  fi
}

has_symlink_version() {
  local version
  version=$1
  local symlink_version_dir
  symlink_version_dir=$JULIA_SYMLINK_DIR/julia-$version
  [ -L "$symlink_version_dir" ]  
}

has_broken_symlink_version() {
  local version
  version=$1
  local symlink_version_dir
  symlink_version_dir=$JULIA_SYMLINK_DIR/julia-$version
  [ ! -e "$symlink_version_dir" ]  
}


jvc_load() {
  local version
  version=$1
  local bin_julia
  bin_julia=$JULIA_INSTALL_DIR/julia-$version/bin/julia 
  if $(has_symlink_version "$version") ; then 
    echo "julia-$version already exist in $JULIA_SYMLINK_DIR" 
  else
    if [ -e "$bin_julia" ]; then
      echo "Loading julia-$version"
      ln -s "$bin_julia" "$JULIA_SYMLINK_DIR"/julia-"$version"
    else
      echo Error: Directory "$bin_julia" does not exist.
      echo Error: The corresponding version may not be installed.
    fi
  fi
}

jvc_unload() {
  local version
  version=$1
  if has_symlink_version "$version" ; then 
    rm "$JULIA_SYMLINK_DIR"/julia-"$version"
    echo Symlink julia-"$version" has been removed from "$JULIA_SYMLINK_DIR"
  else
    echo julia-"$version" is not loaded.
    echo No operation is performed.
  fi
}

jvc_installed_version() {
  # ls "$JULIA_INSTALL_DIR" | cut -d "-" -f2- 
  command find "$JULIA_INSTALL_DIR" -maxdepth 1 -type d -name "julia-*"  \
    | cut -d "-" -f2- | sort -r 
  }

jvc_loaded_version() {
  # ls "$JULIA_SYMLINK_DIR" | grep julia- | cut -d "-" -f2- 
  # ls "$JULIA_SYMLINK_DIR"/julia-* | cut -d "-" -f2- 
  command find "$JULIA_SYMLINK_DIR" -maxdepth 1 -name "julia-*"  \
    | cut -d "-" -f2- | sort -r 
  }



jvc_download_version() {
  cd "$JULIA_DOWNLOAD_DIR" || return 1
  ls julia-*.tar.gz   
}

jvc_purge() {
  echo Note that the default julia symlink will not be purged.
  local loaded_version
  loaded_version=$(jvc_loaded_version)
  if [ -n "$loaded_version" ]; then
    echo The following version has been loaded:
    echo "$loaded_version" | awk '{print "  " $1}'
    if jvc_confirm2 "Warning: the purge command will unload/remove all julia symbolic links? [y/n] " ;  then
      for version in $loaded_version
      do
        jvc_unload "$version"
        echo julia-"$version" has been unloaded.
      done
    fi
  else
    echo No Julia version is loaded. There is nothing to purge.
  fi

}


jvc_switch() {
  local version
  version=$1
  local installed_version
  installed_version=$(jvc_installed_version)
  available_version=$(jvc_ls_all)
  # if [[ ! "${installed_version[@]}" =~  "$version" ]]; then
  if ! printf '%s\n' "$available_version" | grep -q "$version"; then 
    echo Input version "$version" is not a valid version.
    echo "(Please check all available version using \"jvc avail all\".)"
    exit 1 
  fi


  if ! printf '%s\n' "$installed_version" | grep -q "$version"; then 
    echo input version "$version" seems not be installed.
    echo Installed versions are:
    jvc_installed_version
    exit 1
  fi

  if [ -n "$(command -v julia)" ] ; then
    local existing_version
    existing_version=$(julia --version | cut -d " " -f3-) 
    if [ "$existing_version" = "$version" ]; then
      echo Your are already at version "$version" 
      echo No operation will be performed.
      return 
    fi
    echo Current 'julia' alias has been selected as "$(julia --version)"
    if jvc_confirm2 "Do you want to switch to julia $version [y/n] ? "; 
    then 
      ln -sf "$JULIA_INSTALL_DIR"/julia-"$version"/bin/julia "$JULIA_SYMLINK_DIR"/julia
    fi
  else 
    echo  "'julia' alias has been selected as julia $version. " 
  fi
}

jvc_migrate() { 
  local objective
  objective="$@"
  local from_version
  local to version
  from_version=$1
  to_version=$3
  local depot_path
  if [ -z $JULIA_DEPOT_PATH ]; then
    echo "JULIA_DEPOT_PATH not found, using ~/.julia by default" 
    depot_path="$HOME/.julia"
  else 
    depot_path=$JULIA_DEPOT_PATH # This is problemmatic
  fi
  if [[ $objective == @([0-9].[0-9] to [0-9].[0-9]) ]]; then
    echo Matching 
  else 
    echo Wrong argue
    exit 1
  fi
  # -y for GNU Diff 
  # -c for POSIX Diff 
  diff -y --color "$depot_path/environments/v$from_version/Project.toml" "$depot_path/environments/v$to_version/Project.toml"
  echo "v$from_version Project.toml ===========>  ===========>  ===========> ===========>  v$to_version Project.toml"
  if jvc_confirm2 "Continute to migrate Project.toml from v$from_version to v$to_version ? [Y/n] ";  then
    cp "$depot_path/environments/v$from_version/Project.toml" "$depot_path/environments/v$to_version/Project.toml"
    cp "$depot_path/environments/v$from_version/Manifest.toml" "$depot_path/environments/v$to_version/Manifest.toml"
    echo Migration complete. 
  else 
    exit 1
  fi
  #     # check if dir exist 
  #     # if not create one ?
  #     # overwrite behavior ? 
  #     # What is the preference?
  #   else 
  #     echo Check your input format, it should be e.g., jvc migrate 1.5 to 1.6
  #     echo Note that only major and minor version are supported.
  #     exit 1 
}


jvc() {
  n_args=${#args[@]}

  case ${args} in 
    "-h"| "help" | "--help")
      echo "To be completed."
      echo "jvc install" 
      echo "jvc remove" 
      echo "jvc load" 
      echo "jvc unload" 
      echo "jvc unloaded" 
      echo "jvc status" 
      echo "jvc avail" 
      echo "jvc search" 
      echo "jvc installed" 
      echo "jvc switch" 
      echo "jvc migrate" 
      echo "jvc upstream" 
      echo "jvc update" 
      ;;
    "install")
      jvc_get_sys_info arch platform
      jvc_get_version "${args[@]}" 
      local version
      version=$INSTALLING_VER
      local url
      url=$(get_url_from_platform_arch_version "$platform" $arch "$version")
      if jvc_confirm2 "Continute to download Julia $version ? [y/n] ";  then
        jvc_checkfolder download "$JULIA_DOWNLOAD_DIR"
        if jvc_has "wget"; then
          jvc_download_tarball_curl "$url" "$version"
        elif jvc_has "curl"; then
          jvc_download_tarball_curl "$url" "$version"
        fi
      else 
        exit 1
      fi
      jvc_checkfolder install "$JULIA_INSTALL_DIR"
      if [ -d "$JULIA_INSTALL_DIR/julia-$version" ]; then 
        echo Installation folder exist. 
        printf "Overwrite the existing contents? [y/n] "  
        read -r choice
        case "$choice" in 
          y|Y|yes ) 
            echo "tar xzf $JULIA_DOWNLOAD_DIR/julia-$version.tar.gz -C  $JULIA_INSTALL_DIR/julia-$version --totals"
            tar xzf "$JULIA_DOWNLOAD_DIR"/julia-"$version".tar.gz -C  "$JULIA_INSTALL_DIR"/ --totals
            jvc_done Extracting done.
            ;;
          n|N|no ) echo "Aborted."  
            exit 1
            ;; 
          * ) echo "Invalid input, please enter yes or no"
            exit 1 
            ;;
        esac
      else
        mkdir "$JULIA_INSTALL_DIR"/julia-"$version"
        tar xzf "$JULIA_DOWNLOAD_DIR/julia-$version.tar.gz" -C "$JULIA_INSTALL_DIR" --totals
        echo Extracting done.
      fi

# Create links
echo Creating symbolic link julia-"$version" in "$JULIA_SYMLINK_DIR"
jvc_checkfolder "create_symlink" "$JULIA_SYMLINK_DIR"
ln -sf "$JULIA_INSTALL_DIR"/julia-"$version"/bin/julia "$JULIA_SYMLINK_DIR"/julia-"$version"
jvc_done Installation done.
;;
"remove"|"rm")
  echo You have installed the following version:
  jvc_installed_version
  printf "Enter the version you would like to remove: "
  # Check version format else re-enter or abort
  read -r rm_version 
  local rm_symlink
  rm_symlink=$JULIA_SYMLINK_DIR/julia-$rm_version
  local rm_bin
  rm_bin=$JULIA_INSTALL_DIR/julia-$rm_version
  #check in jvc_installed
  #check in jvc_symlink
  if jvc_confirm2 "Warning: you are about remove $rm_version from $JULIA_INSTALL_DIR. [y/n]" ;  then
    rm -rf "$rm_bin" 
    [ -L "$rm_symlink" ] && rm -rf "$rm_symlink"
  fi

  ;;
"download")
  jvc_get_sys_info arch platform
  jvc_get_version "${args[@]}" 
  local version
  version=$INSTALLING_VER
  local url
  url=$(get_url_from_platform_arch_version "$platform" $arch "$version")
  if jvc_confirm2 "Continute to download Julia $version ? [y/n] ";  then
    jvc_checkfolder download "$JULIA_DOWNLOAD_DIR"
    if jvc_has "wget"; then
      jvc_download_tarball_wget "$url" "$version"
    elif jvc_has "curl"; then
      jvc_download_tarball_curl "$url" "$version"
    fi
  else 
    exit 1
  fi
  ;;
"load")
  jvc_load "${args[1]}"
  ;;
"unload")
  jvc_unload "${args[1]}" 
  ;;
"loaded")
  jvc_loaded_version
  ;;
"status"|"st")
  echo =========================
  echo "Installed version" "$JULIA_INSTALL_DIR"
  jvc_installed_version
  echo =========================
  echo "Loaded version" "$JULIA_SYMLINK_DIR"
  jvc_loaded_version
  echo =========================
  echo "Downloaded version" "$JULIA_DOWNLOAD_DIR"
  jvc_download_version
  echo =========================
  echo List all Julia version installed 
  echo List the installed Julia version 
  echo Possible to track Project.toml? 
  echo List installed Julia version 
  echo List download Julia version 
  echo List loaded Julia version
  echo List shared Project.toml if possible
  ;;
"available"|"avail")
  case ${args[1]} in
    "stable"|"")
      jvc_ls_stable  
      ;;
    "all")
      jvc_ls_all
      ;;
  esac
  ;;
"search")
  if [ "${args[1]}" != "" ]; then
    jvc_search "${args[1]}" 
  else 
    jvc_get_version ""
  fi
  ;;
"switch")
  jvc_switch "${args[1]}" 
  ;;
"nightly") 
  jvc_get_sys_info arch platform
  local url
  url=$(jvc_get_nightly_url "$platform" $arch)
  if jvc_confirm2 "Continute to download Julia nightly ? [y/n] ";  then
    jvc_checkfolder download "$JULIA_DOWNLOAD_DIR"
    jvc_download_tarball "$url" nightly
  else 
    exit 1
  fi
  jvc_checkfolder install "$JULIA_INSTALL_DIR"
  if [ -d "$JULIA_INSTALL_DIR/julia-nightly" ]; then 
    echo Installation folder exist. 
    printf "Overwrite the existing contents? [y/n] "
    read -r choice
    case "$choice" in 
      y|Y|yes ) 
        tar xzf "$JULIA_DOWNLOAD_DIR"/julia-nightly.tar.gz -C  "$JULIA_INSTALL_DIR"/julia-nightly --totals --strip-components=1
        echo Extracting done.
        ;;
      n|N|no ) echo "Aborted."  
        exit 1
        ;; 
      * ) echo "Invalid input, please enter yes or no"
        exit 1 
        ;;
    esac
  else
    mkdir "$JULIA_INSTALL_DIR"/julia-nightly
    tar xzf "$JULIA_DOWNLOAD_DIR/julia-nightly.tar.gz" -C "$JULIA_INSTALL_DIR"/julia-nightly --totals --strip-components=1
    echo Extracting done.
  fi

# Create links
echo Creating symbolic link julia-nightly in "$JULIA_SYMLINK_DIR"
jvc_checkfolder "create_symlink" "$JULIA_SYMLINK_DIR"
ln -sf "$JULIA_INSTALL_DIR"/julia-nightly/bin/julia "$JULIA_SYMLINK_DIR"/julia-nightly
echo Installation done.
;;
"installed")
  echo List all Julia version installed 
  jvc_installed_version
  ;;
"upstream")
  echo Current upstream is "$UPSTREAM_NAME"
  echo The available upstreams are: 
  local upstream_list
  upstream_list=$(jvc_get_upstream_list_local)
  local upstream_short=($(echo "${upstream_list[@]}" | awk -F[.:] '{print $1}'))
  jvc_split "$upstream_list" , upstream_menu
  unset 'upstream_menu[-1]'
  echo "${upstream_list[@]}" | awk -F[.:] '{print "  " NR ". " $1 ": " $2}'
  printf "Select your preferred upstream. (Enter number [1-%i]): "  "${#upstream_menu[@]}"
  read -r upstream_choice

  if [ "$upstream_choice" -eq "$upstream_choice" ] && [ "$upstream_choice" -le ${#upstream_menu[@]} ] ; then 
    local jvc_dir
    jvc_dir=$(dirname "$0")
    sed -i "s/UPSTREAM_NAME=.*/UPSTREAM_NAME=${upstream_short[$upstream_choice-1]}/" "$jvc_dir"/.jvcrc
    echo Your upstream is switched to "${upstream_menu[$upstream_choice-1]}" 
  else
    echo "Please enter valid input."
  fi
  ;;
"purge")
  jvc_purge
  ;;
"migrate")
  # Matching from here
  jvc_migrate ${args[1]} ${args[2]} ${args[3]}
  ;;
"version" | "-v" | "--version")
  echo "Julia version control (JVC) version 0.1.0"
  ;;
*) 
  echo Unsupported arguements. Check your input.
esac
}

jvc


